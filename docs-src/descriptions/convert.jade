h2#convert Convert observables


+descr-method('to-property', 'toProperty', 'stream.toProperty([getCurrent])').
  Converts a stream to a property.
  Accepts an optional #[b getCurrent] callback, which will be called on
  each #[a(href='#active-state') activation] to get the current value at that moment.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.toProperty(() => 0);
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty] <value:current> 0
    > [sequentially.toProperty] <value> 1
    > [sequentially.toProperty] <value> 2
    > [sequentially.toProperty] <value> 3
    > [sequentially.toProperty] <end>

pre(title='events in time').
  source:  ----1----2----3X
  result: 0----1----2----3X
div



+descr-method('changes', 'changes', 'property.changes()').
  Converts a property to a stream.
  If the property has a current value (or error), it will be ignored
  (subscribers of the stream won't get it).

p.
  If you call #[b changes] on a stream, it will return a new stream with
  #[a(href='#current-in-streams') current values/errors] removed.

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var property = source.toProperty(() => 0);
    var result = property.changes();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.changes] <value> 1
    > [sequentially.toProperty.changes] <value> 2
    > [sequentially.toProperty.changes] <value> 3
    > [sequentially.toProperty.changes] <end>

pre(title='events in time').
  property: 0----1----2----3X
  result:    ----1----2----3X
div
