h2#current-in-streams Current values/errors in streams

p.
  Normally only properties have current values,
  but sometimes streams may also emit them.
  I.e. sometimes a stream can emit a value (or error) in response to
  a first subscription (i.e. on #[a(href='#active-state') activation]),
  and only the first subscriber will get the value.

p.
  In Bacon.js there are even methods that create such streams (#[tt .once], #[tt .fromArray]),
  but in Kefir we are trying to avoid them as they may cause some confusion
  for beginners (which actually happens quite a lot for Bacon).
  So in Kefir it is less easier to create streams emitting current values,
  but there are still situations when they can be created.

p.
  Let see some examples.
  Each of these streams will emit a value at the moment the first subscriber is added:

pre.javascript(title='example')
  :escapehtml
    var s1 = Kefir.merge([Kefir.constant(1), Kefir.never()]);

    var s2 = Kefir.stream(emitter => {
      emitter.emit(1);
    });

    var s3 = Kefir.combine([Kefir.constant(1), Kefir.constant(1)]);

p.
  When a stream emits a value like this, it is internally considered as a #[b current] value.
  The #[a(href='#log') log] method will mark it as current,
  and in #[a(href='#on-any') onAny] subscriber, #[tt event.current] will be equal to #[b true].

p.
  There are some issues with all this, but also some benefits.
  Issue number one is that only the first subscriber gets this value (or error).
  Even if it was an #[b onEnd] subscriber, it'll still eat all current values,
  and further subscribers won't get them.
  Second issue is that it may be considered as a not semantically correct behaviour,
  i.e., because the moment when the stream emits values depends on when it gets subscribers...

p.
  First benefit â€” it allows you to define the current value in
  #[a(href='#stream') Kefir.stream()]. It is easier to show with an example:

pre.javascript(title='example')
  :escapehtml
    var scrollTop = Kefir.stream(emitter => {

      function emitScrollY() {
        emitter.emit(window.scrollY);
      }

      emitScrollY(); // here we are emitting the current value

      window.addEventListener('scroll', emitScrollY);

      return () => {
        window.removeEventListener('scroll', emitScrollY);
      };

    }).toProperty();

    scrollTop.log();

pre(title='console output')
  :escapehtml
    > [stream.toProperty] <value:current> 0
    > [stream.toProperty] <value> 4
    > [stream.toProperty] <value> 9
    > [stream.toProperty] <value> 23

p.
  The second benefit is that it makes possible to not lose
  current values when converting properties to streams and then back to properties.
  For example, #[a(href='#combine') combine] always returns a stream
  (#[a(href='https://github.com/rpominov/kefir/issues/44#issuecomment-72875317') why?])
  but it'll still emit the current value.
  So one can do #[tt Kefir.combine([p1, p2], fn).toProperty()],
  and get a property combined from two other properties with the correct current value.

p.
  Also it's a good practice to convert all streams that might
  emit current values to properties by using the #[b toProperty] method.
  That should make your code more reliable as all subscribers will get current values.
  And it's just better semantically as current values should live in the properties.



